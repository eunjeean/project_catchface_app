package com.example.fersonaapplication;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import java.io.IOException;
import java.util.ArrayList;

public class ReportActivity2 extends AppCompatActivity implements View.OnClickListener {

    // RecyclerView
    ArrayList<MonFaceListVO> data;
    private RecyclerView wantedListRv;
    private MonRAdapter adapter;

    ScrollView scrollView;
    LinearLayout mainLl,step1Ll,step2Ll,step3Ll,step4Ll,step5Ll;
    EditText monMakeEt, reportConEt;
    Button step1Btn, step2Btn, step3Btn, repAdrBtn, step4Btn, wantedviewBtn, infoViewBtn, step5Btn, submitBtn;
    ImageButton monMake1Btn,monMake2Btn,monMake3Btn,monMake4Btn,voiceBtn;
    ImageView wantedImg,monResultImg;
    RadioButton rd1, rd2, rd3, rd4, rd5, rd6;
    Spinner wantedSpin;
    TextView dateTv, timeTv, nameTv, phoneTv;
    DatePicker repDate;
    TimePicker repTime;
    CheckBox wantedCk, infoCk;

    Intent intent;
    final int PERMISSION = 1;
    SpeechRecognizer mRecognizer;
    String reportCont = null;
    String reportWanted = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_report2);

        data = new ArrayList<>();
        wantedListRv = findViewById(R.id.wantedListRv);

        scrollView = findViewById(R.id.scrollView);

        mainLl = findViewById(R.id.mainLl);
        step1Ll = findViewById(R.id.step1Ll);
        step2Ll = findViewById(R.id.step2Ll);
        step3Ll = findViewById(R.id.step3Ll);
        step4Ll = findViewById(R.id.step4Ll);
        step5Ll = findViewById(R.id.step5Ll);

        monMakeEt = findViewById(R.id.monMakeEt);
        reportConEt = findViewById(R.id.reportConEt);

        step1Btn = findViewById(R.id.step1Btn);
        step2Btn = findViewById(R.id.step2Btn);
        step3Btn = findViewById(R.id.step3Btn);
        repAdrBtn = findViewById(R.id.repAdrBtn);
        step4Btn = findViewById(R.id.step4Btn);
        wantedviewBtn = findViewById(R.id.wantedviewBtn);
        infoViewBtn = findViewById(R.id.infoViewBtn);
        step5Btn = findViewById(R.id.step5Btn);
        submitBtn = findViewById(R.id.submitBtn);
        voiceBtn = findViewById(R.id.voiceBtn);

        monMake1Btn = findViewById(R.id.monMake1Btn);
        monMake2Btn = findViewById(R.id.monMake2Btn);
        monMake3Btn = findViewById(R.id.monMake3Btn);
        monMake4Btn = findViewById(R.id.monMake4Btn);

        wantedImg = findViewById(R.id.wantedImg);
        monResultImg = findViewById(R.id.monResultImg);

        wantedListRv = findViewById(R.id.wantedListRv);

        rd1 = findViewById(R.id.rd1);
        rd2 = findViewById(R.id.rd2);
        rd3 = findViewById(R.id.rd3);
        rd4 = findViewById(R.id.rd4);
        rd5 = findViewById(R.id.rd5);
        rd6 = findViewById(R.id.rd6);

        wantedSpin = findViewById(R.id.wantedSpin);

        dateTv = findViewById(R.id.dateTv);
        timeTv = findViewById(R.id.timeTv);
        nameTv = findViewById(R.id.nameTv);
        phoneTv = findViewById(R.id.phoneTv);

        repDate = findViewById(R.id.repDate);

        repTime = findViewById(R.id.repTime);

        wantedCk = findViewById(R.id.wantedCk);
        infoCk = findViewById(R.id.infoCk);

        step1Btn.setOnClickListener(this);
        step2Btn.setOnClickListener(this);
        step3Btn.setOnClickListener(this);
        step4Btn.setOnClickListener(this);
        step5Btn.setOnClickListener(this);
        voiceBtn.setOnClickListener(this);
        repAdrBtn.setOnClickListener(this);
        wantedviewBtn.setOnClickListener(this);
        infoViewBtn.setOnClickListener(this);
        submitBtn.setOnClickListener(this);

        monMake1Btn.setOnClickListener(this);
        monMake2Btn.setOnClickListener(this);
        monMake3Btn.setOnClickListener(this);
        monMake4Btn.setOnClickListener(this);

//        // RecyclerView
//        for(int i=0;i<4;i++){
//            addItem("img");
//        }

        adapter = new MonRAdapter(data);
        wantedListRv.setAdapter(adapter);
        wantedListRv.setLayoutManager(new LinearLayoutManager(this,RecyclerView.HORIZONTAL, false));

        // ÏïàÎìúÎ°úÏù¥Îìú 6.0Î≤ÑÏ†Ñ Ïù¥ÏÉÅÏù∏ÏßÄ Ï≤¥ÌÅ¨Ìï¥ÏÑú ÌçºÎØ∏ÏÖò Ï≤¥ÌÅ¨
        if (Build.VERSION.SDK_INT >= 23) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.INTERNET,
                    Manifest.permission.RECORD_AUDIO}, PERMISSION);
        }

        // RecognizerIntent ÏÉùÏÑ±
        intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getPackageName()); // Ïó¨Î∂ÑÏùò ÌÇ§
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ko-KR"); // Ïñ∏Ïñ¥ ÏÑ§Ï†ï

        // Î≤îÏ£ÑÏú†Ìòï Ï≤¥ÌÅ¨
        WantedCheck();

        // Ïã†Í≥†ÎÇ¥Ïö© ÏûëÏÑ±
        if(reportConEt.getText().toString().length() < 5){
//            Toast.makeText(this, "Ïã†Í≥†ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöîüòä", Toast.LENGTH_SHORT).show();
        }else if(180 < reportConEt.getText().toString().length()){
//            Toast.makeText(this, "Ïã†Í≥†ÎÇ¥Ïö©Ïù¥ Ï¥àÍ≥ºÌïòÏòÄÏäµÎãàÎã§.üò•", Toast.LENGTH_SHORT).show();
        }else{
            rd2.setChecked(true);
            rd2.setButtonTintList(ColorStateList.valueOf(ContextCompat.getColor(this, R.color.pointOrange)));
            reportCont = reportConEt.getText().toString();
            Log.d("ReportActivity","Ïã†Í≥†ÎÇ¥Ïö© : "+reportCont);
        }

        // ÏÇ¨Í±¥Î∞úÏÉùÏùºÏûê
        ReportDate();

        // ÏÇ¨Í±¥Î∞úÏÉùÏãúÍ∞Ñ
        ReportTime();


    }

//    public void addItem(String imgName){
//        MonFaceListVO item = new MonFaceListVO();
//
//        item.setMonList(imgName);
//
//        data.add(item);
//    }

    // Î≤îÏ£ÑÏú†Ìòï Ï≤¥ÌÅ¨
    private void WantedCheck() {
        wantedSpin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @SuppressLint("ResourceAsColor")
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {
                Log.d("ReportActivity",""+wantedSpin.getItemAtPosition(position));
                if(!wantedSpin.getItemAtPosition(position).toString().equals("ÏÑ†ÌÉù")){
                    rd1.setChecked(true);
                    rd1.setButtonTintList(ColorStateList.valueOf(ContextCompat.getColor(ReportActivity2.this, R.color.pointOrange)));
                    reportWanted = (String) wantedSpin.getItemAtPosition(position);
                    Log.d("ReportActivity","Î≤îÏ£ÑÏú†Ìòï ÏÑ†ÌÉù = "+reportWanted);
                }else{
                    rd1.setChecked(false);
                    rd1.setButtonTintList(ColorStateList.valueOf(ContextCompat.getColor(ReportActivity2.this, R.color.btnGray)));
                }
            }
            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }

    // ÏÇ¨Í±¥Î∞úÏÉùÏùºÏûê
    private void ReportDate() {
        repDate.init(repDate.getYear(), repDate.getMonth(), repDate.getDayOfMonth(), new DatePicker.OnDateChangedListener() {
            @Override
            public void onDateChanged(DatePicker view, int year, int month, int day) {
                // Í∞íÏù¥ Î∞îÎÄîÎïåÎßàÎã§ ÌÖçÏä§Ìä∏ Î∑∞Ïùò Í∞íÏùÑ Î∞îÍøîÏ§ÄÎã§
                dateTv.setVisibility(View.VISIBLE);
                rd3.setChecked(true);
                rd3.setButtonTintList(ColorStateList.valueOf(ContextCompat.getColor(ReportActivity2.this, R.color.pointOrange)));
                dateTv.setText(String.format("%d/%d/%d",year,month+1,day));
            }
        });
    }

    // ÏÇ¨Í±¥Î∞úÏÉùÏãúÍ∞Ñ
    private void ReportTime() {
        repTime.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {
            @Override
            public void onTimeChanged(TimePicker timePicker, int hour, int min) {
                timeTv.setVisibility(View.VISIBLE);
                rd4.setChecked(true);
                rd4.setButtonTintList(ColorStateList.valueOf(ContextCompat.getColor(ReportActivity2.this, R.color.pointOrange)));

                if(Build.VERSION.SDK_INT>= Build.VERSION_CODES.M){
                    hour = repTime.getHour();
                    min = repTime.getMinute();
                }else{
                    hour = repTime.getCurrentHour();
                    min = repTime.getCurrentMinute();
                }

                if(hour>=12){
                    timeTv.setText(String.format("PM "+"%d : %d",hour,min));
                }else{
                    timeTv.setText(String.format("AM "+"%d : %d",hour,min));
                }

            }
        });
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.voiceBtn:
                Log.d("ReportAcitivity2","ÏùåÏÑ±ÎÖπÏùå");
                mRecognizer = SpeechRecognizer.createSpeechRecognizer(this); // ÏÉà SpeechRecognizer Î•º ÎßåÎìúÎäî Ìå©ÌÜ†Î¶¨ Î©îÏÑúÎìú
                mRecognizer.setRecognitionListener(listener); // Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
                mRecognizer.startListening(intent); // Îì£Í∏∞ ÏãúÏûë
                break;
            case R.id.step1Btn:
                Log.d("ReportAcitivity2","step1");
                step2Ll.setVisibility(View.GONE);
                step3Ll.setVisibility(View.GONE);
                step4Ll.setVisibility(View.GONE);
                step5Ll.setVisibility(View.GONE);
                if(step1Ll.getVisibility()==View.VISIBLE){
                    step2Ll.setVisibility(View.GONE);
                    step3Ll.setVisibility(View.GONE);
                    step4Ll.setVisibility(View.GONE);
                    step5Ll.setVisibility(View.GONE);
                }else{
                    step1Ll.setVisibility(View.VISIBLE);
                }
                break;
            case R.id.step2Btn:
                Log.d("ReportAcitivity2","step2");
                step1Ll.setVisibility(View.GONE);
                step3Ll.setVisibility(View.GONE);
                step4Ll.setVisibility(View.GONE);
                step5Ll.setVisibility(View.GONE);
                if(step2Ll.getVisibility()==View.VISIBLE){
                    step1Ll.setVisibility(View.GONE);
                    step3Ll.setVisibility(View.GONE);
                    step4Ll.setVisibility(View.GONE);
                    step5Ll.setVisibility(View.GONE);
                }else{
                    step2Ll.setVisibility(View.VISIBLE);
                }
                break;
            case R.id.step3Btn:
                Log.d("ReportAcitivity2","step3");
                step1Ll.setVisibility(View.GONE);
                step2Ll.setVisibility(View.GONE);
                step4Ll.setVisibility(View.GONE);
                step5Ll.setVisibility(View.GONE);
                if(step3Ll.getVisibility()==View.VISIBLE){
                    step1Ll.setVisibility(View.GONE);
                    step2Ll.setVisibility(View.GONE);
                    step4Ll.setVisibility(View.GONE);
                    step5Ll.setVisibility(View.GONE);
                }else{
                    step3Ll.setVisibility(View.VISIBLE);
                }
                break;
            case R.id.step4Btn:
                Log.d("ReportAcitivity2","step4");
                step1Ll.setVisibility(View.GONE);
                step2Ll.setVisibility(View.GONE);
                step3Ll.setVisibility(View.GONE);
                step5Ll.setVisibility(View.GONE);
                if(step4Ll.getVisibility()==View.VISIBLE){
                    step1Ll.setVisibility(View.GONE);
                    step2Ll.setVisibility(View.GONE);
                    step3Ll.setVisibility(View.GONE);
                    step5Ll.setVisibility(View.GONE);
                }else{
                    step4Ll.setVisibility(View.VISIBLE);
                }
                break;
            case R.id.step5Btn:
                Log.d("ReportAcitivity2","step5");
                step1Ll.setVisibility(View.GONE);
                step2Ll.setVisibility(View.GONE);
                step3Ll.setVisibility(View.GONE);
                step4Ll.setVisibility(View.GONE);
                if(step5Ll.getVisibility()==View.VISIBLE){
                    step1Ll.setVisibility(View.GONE);
                    step2Ll.setVisibility(View.GONE);
                    step3Ll.setVisibility(View.GONE);
                    step4Ll.setVisibility(View.GONE);
                }else{
                    step5Ll.setVisibility(View.VISIBLE);
                }
                break;
            case R.id.repAdrBtn:
                Log.d("ReportPage","ÏúÑÏπòÏ∞æÍ∏∞");
                new AlertDialog.Builder(this)
                        .setTitle("ÏúÑÏπòÏ∞æÍ∏∞")
                        .setMessage("ÏßÄÎèÑAPI Î≥¥Ïó¨Ï§Ñ ÏòàÏ†ïüòÅ")
                        // positive : Í∏çÏ†ï , setNegativeButton : Î∂ÄÏ†ï, setNeutralButton : Í∏çÏ†ïÎèÑ Î∂ÄÏ†ïÎèÑ ÏïÑÎãå
                        .setPositiveButton("ÌôïÏù∏", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dlg, int sumthin) {
                                rd5.setChecked(true);
                                rd5.setButtonTintList(ColorStateList.valueOf(ContextCompat.getColor(ReportActivity2.this, R.color.pointOrange)));
                            }
                        })
                        .setNeutralButton("Îã´Í∏∞", new DialogInterface.OnClickListener(){
                            public void onClick(DialogInterface dialog, int which){
                            }
                        })
                        .show(); // ÌåùÏóÖÏ∞Ω Î≥¥Ïó¨Ï§å
                break;
            case R.id.wantedviewBtn:
                Log.d("ReportPage","Ïã†Í≥†ÎÇ¥Ïö© Í≥µÏú†ÎèôÏùò");
                new AlertDialog.Builder(this)
                        .setTitle("Ïã†Í≥†ÎÇ¥Ïö©ÎèôÏùòÏÑú")
                        .setMessage("Ïã†Í≥†ÎÇ¥Ïö©ÎèôÏùò ÎÇ¥Ïö© ÏûëÏÑ±ÏòàÏ†ïüòÅ")
                        // positive : Í∏çÏ†ï , setNegativeButton : Î∂ÄÏ†ï, setNeutralButton : Í∏çÏ†ïÎèÑ Î∂ÄÏ†ïÎèÑ ÏïÑÎãå
                        .setPositiveButton("ÌôïÏù∏", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dlg, int sumthin) {
                                wantedCk.setChecked(true);
                            }
                        })
                        .setNeutralButton("Îã´Í∏∞", new DialogInterface.OnClickListener(){
                            public void onClick(DialogInterface dialog, int which){
                                wantedCk.setChecked(false);
                            }
                        })
                        .show(); // ÌåùÏóÖÏ∞Ω Î≥¥Ïó¨Ï§å
                break;
            case R.id.infoViewBtn:
                Log.d("ReportPage","Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßëÎèôÏùò");
                new AlertDialog.Builder(this)
                        .setTitle("Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßëÎèôÏùò")
                        .setMessage("Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßëÎèôÏùò ÎÇ¥Ïö© ÏûëÏÑ±ÏòàÏ†ïüòÅ")
                        // positive : Í∏çÏ†ï , setNegativeButton : Î∂ÄÏ†ï, setNeutralButton : Í∏çÏ†ïÎèÑ Î∂ÄÏ†ïÎèÑ ÏïÑÎãå
                        .setPositiveButton("ÌôïÏù∏", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dlg, int sumthin) {
                                infoCk.setChecked(true);
                            }
                        })
                        .setNeutralButton("Îã´Í∏∞", new DialogInterface.OnClickListener(){
                            public void onClick(DialogInterface dialog, int which){
                                infoCk.setChecked(false);
                            }
                        })
                        .show(); // ÌåùÏóÖÏ∞Ω Î≥¥Ïó¨Ï§å
                break;
            case R.id.submitBtn:
                Log.d("ReportPage submitBtn",""+reportWanted+" , "+reportCont+" , "+dateTv.getText()+" , "+timeTv.getText());
                Toast.makeText(this, "Ï†úÏ∂úüòä", Toast.LENGTH_SHORT).show();
                break;

//                Î™ΩÌÉÄÏ£º Ïù¥ÎØ∏ÏßÄ ÌÅ¥Î¶≠
            case R.id.monMake1Btn:
                break;
            case R.id.monMake2Btn:
                break;
            case R.id.monMake3Btn:
                break;
            case R.id.monMake4Btn:
                break;

        }
    }

    private RecognitionListener listener = new RecognitionListener() {
        @Override
        public void onReadyForSpeech(Bundle params) {
            // ÎßêÌïòÍ∏∞ ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞ÄÎêòÎ©¥ Ìò∏Ï∂ú
            Toast.makeText(getApplicationContext(),"ÏùåÏÑ±Ïù∏Ïãù ÏãúÏûë",Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onBeginningOfSpeech() {
            // ÎßêÌïòÍ∏∞ ÏãúÏûëÌñàÏùÑ Îïå Ìò∏Ï∂ú
        }

        @Override
        public void onRmsChanged(float rmsdB) {
            // ÏûÖÎ†•Î∞õÎäî ÏÜåÎ¶¨Ïùò ÌÅ¨Í∏∞Î•º ÏïåÎ†§Ï§å
        }

        @Override
        public void onBufferReceived(byte[] buffer) {
            // ÎßêÏùÑ ÏãúÏûëÌïòÍ≥† Ïù∏ÏãùÏù¥ Îêú Îã®Ïñ¥Î•º bufferÏóê Îã¥Ïùå
        }

        @Override
        public void onEndOfSpeech() {
            // ÎßêÌïòÍ∏∞Î•º Ï§ëÏßÄÌïòÎ©¥ Ìò∏Ï∂ú
        }

        @Override
        public void onError(int error) {
            // ÎÑ§Ìä∏ÏõåÌÅ¨ ÎòêÎäî Ïù∏Ïãù Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏùÑ Îïå Ìò∏Ï∂ú
            String message;

            switch (error) {
                case SpeechRecognizer.ERROR_AUDIO:
                    message = "Ïò§ÎîîÏò§ ÏóêÎü¨";
                    break;
                case SpeechRecognizer.ERROR_CLIENT:
                    message = "ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏóêÎü¨";
                    break;
                case SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS:
                    message = "ÌçºÎØ∏ÏÖò ÏóÜÏùå";
                    break;
                case SpeechRecognizer.ERROR_NETWORK:
                    message = "ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨";
                    break;
                case SpeechRecognizer.ERROR_NETWORK_TIMEOUT:
                    message = "ÎÑ§Ìä∏Ïõç ÌÉÄÏûÑÏïÑÏõÉ";
                    break;
                case SpeechRecognizer.ERROR_NO_MATCH:
                    message = "Ï∞æÏùÑ Ïàò ÏóÜÏùå";
                    break;
                case SpeechRecognizer.ERROR_RECOGNIZER_BUSY:
                    message = "RECOGNIZER Í∞Ä Î∞îÏÅ®";
                    break;
                case SpeechRecognizer.ERROR_SERVER:
                    message = "ÏÑúÎ≤ÑÍ∞Ä Ïù¥ÏÉÅÌï®";
                    break;
                case SpeechRecognizer.ERROR_SPEECH_TIMEOUT:
                    message = "ÎßêÌïòÎäî ÏãúÍ∞ÑÏ¥àÍ≥º";
                    break;
                default:
                    message = "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÏûÑ";
                    break;
            }

            Toast.makeText(getApplicationContext(), "ÏóêÎü¨ Î∞úÏÉù : " + message,Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onResults(Bundle results) {
            // Ïù∏Ïãù Í≤∞Í≥ºÍ∞Ä Ï§ÄÎπÑÎêòÎ©¥ Ìò∏Ï∂ú
            // ÎßêÏùÑ ÌïòÎ©¥ ArrayListÏóê Îã®Ïñ¥Î•º ÎÑ£Í≥† textViewÏóê Îã®Ïñ¥Î•º Ïù¥Ïñ¥Ï§å
            ArrayList<String> matches =
                    results.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);

            for(int i = 0; i < matches.size() ; i++){
//                textView.setText(matches.get(i));
                monMakeEt.setText(matches.get(i));
            }
        }

        @Override
        public void onPartialResults(Bundle partialResults) {
            // Î∂ÄÎ∂Ñ Ïù∏Ïãù Í≤∞Í≥ºÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏùÑ Îïå Ìò∏Ï∂ú
        }

        @Override
        public void onEvent(int eventType, Bundle params) {
            // Ìñ•ÌõÑ Ïù¥Î≤§Ìä∏Î•º Ï∂îÍ∞ÄÌïòÍ∏∞ ÏúÑÌï¥ ÏòàÏïΩ
        }
    };

    // Í∞§Îü¨Î¶¨ ÏÇ¨ÏßÑ ÏÑ†ÌÉù
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        super.onActivityResult(requestCode, resultCode, data);
        //requestÏΩîÎìúÍ∞Ä 0Ïù¥Í≥† okÎ•º ÏÑ†ÌÉùÌñàÍ≥† dataÏóê Î≠îÍ∞ÄÍ∞Ä Îì§Ïñ¥ÏûàÎã§Î©¥
        if (requestCode == 0 && resultCode == RESULT_OK) {
            Uri uri = data.getData();
            Log.d("ReportPage", "uri:" + String.valueOf(uri));
            try {
                //UriÌååÏùºÏùÑ BitmapÏúºÎ°ú ÎßåÎì§Ïñ¥ÏÑú ImageViewÏóê ÏßëÏñ¥ ÎÑ£ÎäîÎã§.
                Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), uri);
                wantedImg.setImageBitmap(bitmap);
            } catch (IOException e) {
                Toast.makeText(this, "Î°úÎî©Ïóê Ïò§Î•òÍ∞Ä ÏûàÏäµÎãàÎã§üò•", Toast.LENGTH_LONG).show();
                e.printStackTrace();
            }
        } else {
            Toast.makeText(this, "Ï∑®ÏÜå ÎêòÏóàÏäµÎãàÎã§.üò£", Toast.LENGTH_SHORT).show();
        }
    }
}